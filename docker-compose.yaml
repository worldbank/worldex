version: "3.9"

services:
  web:
    restart: always
    build:
      context: ./ui/
      dockerfile: nginx.Dockerfile
    ports:
      - 80:80
    volumes:
      - ./ui/nginx.conf:/etc/nginx/conf.d/default.conf
    env_file:
      - ./ui/.env
    depends_on:
      - api
    profiles: [ "web" ]
  preview:
    build:
      context: ./ui/
      dockerfile: preview.Dockerfile
    command: yarn serve
    ports:
      - 4173:4173
    volumes:
      - ./ui:/app
      - /app/node_modules/
    env_file:
      - ./ui/.env
    depends_on:
      - api
    profiles: [ "preview" ]
  cors-anywhere:
    build:
      context: ./cors-anywhere
    ports:
      - 8088:8080
  api:
    restart: always
    build:
      context: ./api
    command: poetry run uvicorn app.main:app --reload --host 0.0.0.0 --port 8000
    # command: poetry run gunicorn app.main:app --workers 8 --worker-class uvicorn.workers.UvicornWorker --reload --bind 0.0.0.0:8000
    ports:
      - 8000:8000
    env_file:
      - secrets/api.env
    volumes:
      - ./api:/app
      - /app/.venv/
    depends_on:
      db:
        condition: service_healthy
      qdrant:
        condition: service_healthy
    healthcheck:
      test: curl --fail localhost:8000/health_check || exit 1
  db:
    restart: always
    build:
      context: ./postgis-h3
      # comment out the following for better performance on an ARM-based device (e.g. M1/M2 MacBooks)
      dockerfile: arm64.Dockerfile
    command: postgres -c 'config_file=/etc/postgresql/postgresql.conf'
    volumes:
      # - pg_data:/var/lib/postgresql/data
      - pg_data_trimmed:/var/lib/postgresql/data
      - ./postgis-h3/postgresql.8gb.conf:/etc/postgresql/postgresql.conf
    ports:
      - 5432:5432
    env_file:
      - secrets/db.env
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
  pgweb:
    image: sosedoff/pgweb
    ports:
      - 8081:8081
    env_file:
      - ./secrets/pgweb.env
    depends_on:
      db:
        condition: service_healthy
  es:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.2
    ports:
      - 9200:9200
    env_file:
      - secrets/es.env
  qdrant:
    image: qdrant/qdrant:v1.9.0
    volumes:
      - qdrant_storage:/qdrant/storage:z
    ports:
      - 6333:6333
      - 6334:6334
    healthcheck:
      test: curl --fail localhost:6333/readyz || exit 1
volumes:
  # pg_data:
  pg_data_trimmed:
  qdrant_storage:
